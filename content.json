{"meta":{"title":"Silverlaw's Blog","subtitle":null,"description":null,"author":"silverlaw","url":"https://blog.silverlaw.top","root":"/"},"pages":[{"title":"文章分类","date":"2019-08-13T06:39:05.000Z","updated":"2019-08-13T06:44:43.311Z","comments":true,"path":"categories/index.html","permalink":"https://blog.silverlaw.top/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-13T06:43:11.000Z","updated":"2019-08-13T06:45:03.231Z","comments":true,"path":"tags/index.html","permalink":"https://blog.silverlaw.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux 下扩展磁盘分区","slug":"linux-扩展磁盘分区","date":"2019-10-29T06:00:35.000Z","updated":"2019-10-29T08:02:09.988Z","comments":true,"path":"2019/10/29/linux-扩展磁盘分区/","link":"","permalink":"https://blog.silverlaw.top/2019/10/29/linux-扩展磁盘分区/","excerpt":"扩展指定的磁盘分区首先查看当前系统的磁盘和分区大小12345678// 查看所有的磁盘和分区大小[root@localhost /]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 29.8G 0 disk └─sda1 8:1 0 23.4G 0 part /sdb 8:16 0 3.7T 0 disk ├─sdb1 8:17 0 32G 0 part └─sdb2 8:18 0 3.6T 0 part","text":"扩展指定的磁盘分区首先查看当前系统的磁盘和分区大小12345678// 查看所有的磁盘和分区大小[root@localhost /]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 29.8G 0 disk └─sda1 8:1 0 23.4G 0 part /sdb 8:16 0 3.7T 0 disk ├─sdb1 8:17 0 32G 0 part └─sdb2 8:18 0 3.6T 0 part 12345678910// 查看当前文件系统的使用量[root@localhost /]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/root 19G 18G 0 100% /devtmpfs 16G 0 16G 0% /devtmpfs 16G 0 16G 0% /dev/shmtmpfs 16G 16M 16G 1% /runtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 16G 0 16G 0% /sys/fs/cgrouptmpfs 3.1G 0 3.1G 0% /run/user/0","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/tags/linux/"},{"name":"分区","slug":"分区","permalink":"https://blog.silverlaw.top/tags/分区/"},{"name":"parted","slug":"parted","permalink":"https://blog.silverlaw.top/tags/parted/"}]},{"title":"syslog协议","slug":"syslog协议","date":"2019-08-15T09:38:00.000Z","updated":"2019-08-15T10:01:22.361Z","comments":true,"path":"2019/08/15/syslog协议/","link":"","permalink":"https://blog.silverlaw.top/2019/08/15/syslog协议/","excerpt":"1. 简介 syslog协议属于一种主从式协议，通常被用于信息系统管理及信息安全审核。虽然它有不少缺陷，但仍获得相当多的设备及各种平台的接收端支持。因此syslog能被用来将来自许多不同类型系统的日志记录集成到集中的存储库中。","text":"1. 简介 syslog协议属于一种主从式协议，通常被用于信息系统管理及信息安全审核。虽然它有不少缺陷，但仍获得相当多的设备及各种平台的接收端支持。因此syslog能被用来将来自许多不同类型系统的日志记录集成到集中的存储库中。 2. 协议内容 syslog格式为一个长字符串，整个数据报分为三个部分：PRI、HEADER、MSG PRI: 只能为3、4、5个字符，并且以小于符号开始，以大于符号结束，中间为一个1到3位的数字 HEADER: 由TimeStamp与HostName组成。HEADER部分紧跟PRI，中间没有空格。TimeStamp与HostName之间间隔一个空格。HostName后面紧跟一个空格。 TimeStamp: 字段使用local time，格式为：Mmm dd hh:mm:ss Mmm: 是英语月份的单词缩写，例如：Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec dd: 某个月的多少号，固定宽度2个字符，不足两个字符在数字前面用空格填充。 hh:mm:ss: 本地时间 hh: 24时制的小时，在00-23之间 mm和ss： 分和秒，在00-59之间 HostName: 该字段为主机的hostname。该字段后面紧跟一个空格 MSG: 该字段又两部分组成： TAG和CONTENT TAG: 该字段的值为产生日志的程序名，即推送日志到外部系统的程序名（不超过32个字符）。TAG后面紧跟一个用中括号包含着的pid,即[pid],并且再追加一个:,pid为该推送程序的进程号 CONTENT: 该字段为具体的日志内容 综上，整个数据报为：1&lt;xxx&gt;Mmm dd hh:mm:ss hostname tag[pid]: xxxxxxxxx 3. rsyslog服务器配置3.1 安装syslog服务1sudo yum install rsyslog -y 3.2 修改配置文件123456789$ModLoad imudp$UDPServerRun 514$ModLoad imtcp$InputTCPServerRun 514$template RemoteLogs,&quot;/var/log/%HOSTNAME%/%PROGRAMNAME%.log&quot; **.* ?RemoteLogs&amp; ~ 3.3 启动rsyslog服务生效1systemctl restart rsyslog 4. 参考文献","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/tags/linux/"},{"name":"syslog","slug":"syslog","permalink":"https://blog.silverlaw.top/tags/syslog/"},{"name":"日志","slug":"日志","permalink":"https://blog.silverlaw.top/tags/日志/"},{"name":"协议","slug":"协议","permalink":"https://blog.silverlaw.top/tags/协议/"}]},{"title":"逻辑卷LVM相关操作","slug":"逻辑卷LVM相关的操作","date":"2019-08-15T01:30:30.000Z","updated":"2019-08-24T04:08:25.218Z","comments":true,"path":"2019/08/15/逻辑卷LVM相关的操作/","link":"","permalink":"https://blog.silverlaw.top/2019/08/15/逻辑卷LVM相关的操作/","excerpt":"什么是逻辑卷 逻辑卷（lv）是将几个磁盘分区或者块设备(pv，pv的id必须是8e的，pv可以位于不同的磁盘分区里，pv大小可以不一)组织起来形成一个大的扩展分区（vg,卷组，一个vg至少要包含一个pv。），该扩展分区不能直接用，需要将其划分成逻辑卷（lv）才能使用，lv可以格式化成不同的文件系统，挂载后直接使用。","text":"什么是逻辑卷 逻辑卷（lv）是将几个磁盘分区或者块设备(pv，pv的id必须是8e的，pv可以位于不同的磁盘分区里，pv大小可以不一)组织起来形成一个大的扩展分区（vg,卷组，一个vg至少要包含一个pv。），该扩展分区不能直接用，需要将其划分成逻辑卷（lv）才能使用，lv可以格式化成不同的文件系统，挂载后直接使用。 lv的扩展和缩减是不会影响原有数据的，但逻辑卷缩减的风险大于逻辑卷扩展的风险。 逻辑卷可以支持快照功能。 相关术语 物理卷（PV, Physical Volume） 物理卷就是指磁盘,磁盘分区或从逻辑上和磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有和LVM相关的管理参数。当前LVM允许你在每个物理卷上保存这个物理卷的0至2份元数据拷贝.默认为1,保存在设备的开始处.为2时,在设备结束处保存第二份备份. 卷组（VG, Volume Group） LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。能在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。 逻辑卷（LV, Logical Volume） LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上能建立文件系统(比如/home或/usr等)。 线性逻辑卷 (Linear Volumes) 一个线性逻辑卷聚合多个物理卷成为一个逻辑卷.比如,如果你有两个60GB硬盘,你能生成120GB的逻辑卷. 条块化的逻辑卷(Striped Logical Volumes) 当你写数据到此逻辑卷中时,文件系统能将数据放置到多个物理卷中.对于大量连接读写操作,他能改善数据I/O效率. 映像的逻辑卷(Mirrored Logical Volumes) 映像在不同的设备上保存一致的数据.数据同时被写入原设备及映像设备.他提供设备之间的容错。 快照卷(Snapshot Volumes) 快照卷提供在特定瞬间的一个设备虚拟映像，当快照开始时，他复制一份对当前数据区域的改动，由于他优先执行这些改动，所以他能重构当前设备的状态。 参考: https://www.cnblogs.com/shxdyz/articles/7834980.html 查看逻辑卷信息查看LV lvscan123[root@localhost ~]# lvscan ACTIVE &apos;/dev/VG_BASTION/LV_SWAP&apos; [2.00 GiB] inherit ACTIVE &apos;/dev/VG_BASTION/LV_DATA&apos; [&lt;57.98 GiB] inherit 查看VG vgscan123[root@localhost ~]# vgscan Reading volume groups from cache. Found volume group &quot;VG_BASTION&quot; using metadata type lvm2 查看PV pvscan12345[root@localhost ~]# pvscan PV /dev/sdb1 VG VG_BASTION lvm2 [19.99 GiB / 0 free] PV /dev/sdc1 VG VG_BASTION lvm2 [19.99 GiB / 0 free] PV /dev/sdd1 VG VG_BASTION lvm2 [19.99 GiB / 0 free] Total: 3 [&lt;59.98 GiB] / in use: 3 [&lt;59.98 GiB] / in no VG: 0 [0 ] 创建逻辑卷说明 再创建逻辑卷时，应当先创建物理卷(pv)，再创建卷组(vg)，最后再创建逻辑卷(lv) 创建PV pvcreate12345678pvcreate &lt;device&gt;// device: 要创建物理卷的设备路径示例:[root@centos6 bash]# pvcreate /dev/sda1 Physical volume &quot;/dev/sda1&quot; successfully created 创建VG vgcreate123456789vgcreate &lt;vg_name&gt; &lt;pv list&gt;// vg_name: 卷组名// device list: 要添加到卷组的物理卷pv列表示例:[root@centos6 bash]# vgcreate vg_bastion /dev/sda1 /dev/sdc1 Volume group &quot;vg_bastion&quot; successfully created 修改卷组属性 vgchange 激活卷组: vgchange -ay vg_bastion 创建LV lvcreate1234567891011121314lvcreate -n &lt;lv_name&gt; -L &lt;size&gt; &lt;vg_name&gt; -ylvcreate -n &lt;lv_name&gt; -l &lt;size&gt; &lt;vg_name&gt; -y// -L: 指定大小(--size LogicalVolumeSize[bBsSkKmMgGtTpPeE])// -l: 可以指定百分比(--extents LogicalExtentsNumber[%&#123;VG|FREE|ORIGIN&#125;]),如 100%FREE// lv_name: 逻辑卷名// size： 创建的卷大小// vg_name: 卷组名示例: lvcreate -n &quot;lv_swap&quot; -L &quot;2GiB&quot; &quot;vg_bastion&quot; -y lvcreate -n &quot;lv_data&quot; -l &quot;100%FREE&quot; &quot;vg_bastion&quot; -y 删除逻辑卷说明 在删除逻辑卷之前，应当先卸载掉已经被挂载的分区，然后再进行逻辑卷的删除。 在卸载分区时，如果遇到当前分区正在被使用，无法进行卸载的情况，可以借助lsof命令找到正在占用挂载点的进程，然后将其kill掉，再进行卸载在操作。 逻辑卷的删除顺序与创建顺序相反，首先删除逻辑卷(lv)，然后删除卷组(vg)，最后删除物理卷(pv) 删除LV lvremove12[root@localhost ~]# lvremove /dev/VG_BASTION/LV_SWAP -f -y Logical volume &quot;LV_SWAP&quot; successfully removed 删除VG vgremove12[root@localhost ~]# vgremove VG_BASTION -f -y Volume group &quot;VG_BASTION&quot; successfully removed 删除PV pvremove12[root@localhost ~]# pvremove /dev/sdb1 -f -y Labels on physical volume &quot;/dev/sdb1&quot; successfully wiped. 磁盘分区创建磁盘分区 创建分区表,采用 msdos(MBR)或者GPT GPT分区表: parted -s /dev/sdd mklabel gpt MBR分区表: parted -s /dev/sdd mklabel msdos 创建主分区: 123456789101112parted -s &lt;device&gt; mkpart &lt;part-type&gt; [fs-type] start end// deice: 指定磁盘设备// part-type: 只能为 primary(主分区)、logical(逻辑分区)、extended(扩展分区)// fs-type: 非必填参数,可以为: &quot;btrfs&quot;, &quot;ext2&quot;, &quot;ext3&quot;, &quot;ext4&quot;, &quot;fat16&quot;, &quot;fat32&quot;, &quot;hfs&quot;, &quot;hfs+&quot;, &quot;linux-swap&quot;, &quot;ntfs&quot;, &quot;reiserfs&quot;, or &quot;xfs&quot;// start: 指定分区开始位置，默认为磁盘起始位置// end: 指定分区结束位置,默认为磁盘结束位置示例: parted -s /dev/sdd mkpart primary 4MiB 100% // 在 /dev/sdd 上创建一个主分区，从4MiB的位置开始，到磁盘末尾结束 // 即整个分区大小为 磁盘大小-4MiB 修改分区表状态 123456789parted -s &lt;device&gt; toggle &lt;partition_number&gt; &lt;status&gt;// device: 指定磁盘设备// partition_number: 该磁盘设备上的第几个分区// status: 转换后的状态(raid|lvm)示例: parted -s /dev/sdd toggle 1 &quot;lvm&quot; // 将 /dev/sdd 上的第一个分区标记为 lvm 删除磁盘分区 可以通过parted删除指定的某个分区: parted -s /dev/sdc rm 1 12345678parted -s &lt;device&gt; rm &lt;partition_number&gt;// device: 指定磁盘设备// partition_number: 该磁盘设备上的第几个分区示例: parted -s /dev/sdc rm 1 // 删除 /dev/sdc 上的第一个分区 一般情况下，如果要摧毁整个磁盘分区，那么只需要将磁盘首部的分区表摧毁掉就行了，所以，可以直接采用dd命令: dd if=/dev/zero of=/dev/sdd bs=16MiB count=1 磁盘格式化 制作交换分区: mkswap 12345678mkswap -f -L &lt;label&gt; &lt;device&gt;// device: 指定磁盘设备// label: 指定交换分区的标签label示例： mkswap -f -L label_swap /dev/vg_bastion/lv_swap 格式化: mkfs 12345678910111213mkfs.&lt;fs&gt; -L &lt;label&gt; &lt;device&gt;// fs: 文件系统格式// device: 指定磁盘设备// label: 指定交换分区的标签label示例: mkfs.xfs -L label_data /dev/vg_bastion/lv_data mkfs.ext4 -L label_data /dev/vg_bastion/lv_data mkfs -t xfs -L label_data /dev/vg_bastion/lv_data mkfs -t ext4 -L label_data /dev/vg_bastion/lv_data 数据无价，操作需谨慎参考文献 https://blog.csdn.net/solaraceboy/article/details/78539233 https://www.cnblogs.com/shxdyz/articles/7834980.html","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/tags/linux/"},{"name":"LVM","slug":"lvm","permalink":"https://blog.silverlaw.top/tags/lvm/"}]},{"title":"GRUB与GRUB2的区别","slug":"grub与grub2的区别","date":"2019-08-14T07:48:43.000Z","updated":"2019-08-15T02:04:36.177Z","comments":true,"path":"2019/08/14/grub与grub2的区别/","link":"","permalink":"https://blog.silverlaw.top/2019/08/14/grub与grub2的区别/","excerpt":"1. 什么是GRUB 简单来说GRUB就是电脑开机过后运行的第一个程序，它负责加载操作系统内核并且将当前系统的控制权移交给操作系统内核。","text":"1. 什么是GRUB 简单来说GRUB就是电脑开机过后运行的第一个程序，它负责加载操作系统内核并且将当前系统的控制权移交给操作系统内核。 详细信息参见GRUB的文件。 2. 关于版本 GRUB2是将GRUB完全重构后的版本，所以又将之前版本的GRUB称为GRUB Legacy GRUB Legacy的最后一个版本为: 0.97，即0.97之后的版本均为Grub2,目前GRUB Legacy已经不再做开发了，只进行相关bug的修复，以保证一些旧的系统任然能够使用GRUB Legacy GRUB2的版本是从1.90开始，目前已经到了2.04,它与GRUB Legacy有许多相同的特性，具体的差异见下一小节。 3. GRUB2与GRUB Legacy的差异未完待续参考文档 项目地址 grub legacy文档 grub2文档 镜像地址","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/categories/linux/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"https://blog.silverlaw.top/tags/linux/"},{"name":"GRUB","slug":"grub","permalink":"https://blog.silverlaw.top/tags/grub/"},{"name":"GRUB2","slug":"grub2","permalink":"https://blog.silverlaw.top/tags/grub2/"}]},{"title":"主引导记录MBR","slug":"主引导记录MBR","date":"2019-08-14T07:38:26.000Z","updated":"2019-08-16T01:35:50.287Z","comments":true,"path":"2019/08/14/主引导记录MBR/","link":"","permalink":"https://blog.silverlaw.top/2019/08/14/主引导记录MBR/","excerpt":"1. 什么是MBR 主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。","text":"1. 什么是MBR 主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。 参见维基百科 2. MBR说明2.1 结构 主引导扇区记录着硬盘本身的相关信息以及硬盘各个分区的大小及位置信息，是数据信息的重要入口,它位于硬盘的第一个扇区，即硬盘的前512个字节。这512字节又分为三个部分：启动代码、硬盘分区表、结束标志字。 启动代码： 硬盘的第 1-446 字节 (共446字节) 硬盘分区表: 硬盘的第 447-510 字节 (共64字节) 结束标志字: 硬盘的第 511-512 字节 (共2字节)，为 0x55 和 0xAA 2.2 启动代码 主引导记录最开头是第一阶段引导代码。其中的硬盘引导程序的主要作用是检查分区表是否正确并且在系统硬件完成自检以后将控制权交给硬盘上的引导程序（如GNU GRUB）。它不依赖任何操作系统，而且启动代码也是可以改变的，从而能够实现多系统引导。 2.3 硬盘分区表 硬盘分区表共64字节，又分为4项,每项16字节。故我们在对系统进行分区时，最多只能划分4个主分区或者3个主分区+1个扩展分区。 未完待续参考文档 https://wiki.osdev.org/MBR_(x86) https://en.wikipedia.org/wiki/Master_boot_record","categories":[{"name":"linux","slug":"linux","permalink":"https://blog.silverlaw.top/categories/linux/"}],"tags":[{"name":"MBR","slug":"mbr","permalink":"https://blog.silverlaw.top/tags/mbr/"},{"name":"Linux","slug":"linux","permalink":"https://blog.silverlaw.top/tags/linux/"}]}]}