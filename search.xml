<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++动态加载lib的插件机制实现</title>
      <link href="/2020/01/03/C++%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDLL%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/01/03/C++%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDLL%E7%9A%84%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h1><p>插件，想必大家应该是陌生了吧，什么Vim、VS code、JetBrains全家桶啊都支持插件，但是这背后是如何实现的呢？今天我们就来好好掰扯掰扯。首先我们可以先来看看对插件比较官方的定义，还麻烦大家挪挪步<a href="https://baike.baidu.com/item/%E6%8F%92%E4%BB%B6/369160?fr=aladdin" target="_blank" rel="noopener">百度百科关于插件的定义</a>，但是这些都不重要，重要的是我们要如何来实现插件机制，如何实现在对已有程序不做任何修改的情况下，对程序功能的扩展。。。</p><a id="more"></a><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>大家先把菜刀准备好啊，需求要来了，贴个代码先：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello world.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，这就是一个简单的<code>Hello world</code>，但是呢,</p><ul><li>产品汪A:   我这个项目要先打印一行<code>123456</code>再显示<code>Hello world</code></li><li>产品汪B:   我这个项目要先先打印<code>Hello world</code>再打印<code>123456</code></li><li>产品汪C:    我这个不显示<code>Hello world</code>，只打印<code>123456</code></li><li>产品汪…….</li></ul><p>这个栗子比较简单，一般我们遇到的需求比这个复杂多了，动不动就是某某功能里面，我要加一个什么什么逻辑，所以针对不同的需求，就要编译N个版本的<code>exe</code>进行交付，然后又要挨着全部测试N遍吗？不，插件机制，就能很好的帮我们解决这个问题。</p><h1 id="引入插件后的程序结构"><a href="#引入插件后的程序结构" class="headerlink" title="引入插件后的程序结构"></a>引入插件后的程序结构</h1><p><img src="//wuhui2356.github.io/blog/2020/01/03/C++动态加载DLL的插件机制实现/image-20200308171242234.png" alt="image-20200308171242234"></p><p>整个插件框架大概是这个样子的，最主要的编码工作是在<code>PluginManager</code>这个类里面，其他两个都是约定的接口，但是针对我们上面的需求，就是下面这个样子的：</p><p><img src="//wuhui2356.github.io/blog/2020/01/03/C++动态加载DLL的插件机制实现/image-20200308171922648.png" alt="image-20200308171922648"></p><p>其中<code>IPrintEvent</code>是定义的一个打印事件，而<code>PrintPlugin</code>则是具体的打印实现过程，即直接将<code>PrintPlugin</code>的打印实现直接变成<code>so</code>，然后由程序启动后进行动态加载即可。</p><p>废话就不多说了，是骡子是马，咱拉出来溜溜，首先贴个图，便于直观的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下扩展磁盘分区</title>
      <link href="/2019/10/29/linux-%E6%89%A9%E5%B1%95%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
      <url>/2019/10/29/linux-%E6%89%A9%E5%B1%95%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展指定的磁盘分区"><a href="#扩展指定的磁盘分区" class="headerlink" title="扩展指定的磁盘分区"></a>扩展指定的磁盘分区</h2><h3 id="首先查看当前系统的磁盘和分区大小"><a href="#首先查看当前系统的磁盘和分区大小" class="headerlink" title="首先查看当前系统的磁盘和分区大小"></a>首先查看当前系统的磁盘和分区大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 查看所有的磁盘和分区大小</span><br><span class="line">[root@localhost /]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0 29.8G  0 disk </span><br><span class="line">└─sda1   8:1    0 23.4G  0 part /</span><br><span class="line">sdb      8:16   0  3.7T  0 disk </span><br><span class="line">├─sdb1   8:17   0   32G  0 part </span><br><span class="line">└─sdb2   8:18   0  3.6T  0 part</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//  查看当前文件系统的使用量</span><br><span class="line">[root@localhost /]# df -h</span><br><span class="line">文件系统         容量  已用  可用  已用% 挂载点</span><br><span class="line">/dev/root        19G   18G     0  100% /</span><br><span class="line">devtmpfs         16G     0   16G    0% /dev</span><br><span class="line">tmpfs            16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs            16G   16M   16G    1% /run</span><br><span class="line">tmpfs           5.0M     0  5.0M    0% /run/lock</span><br><span class="line">tmpfs            16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs           3.1G     0  3.1G    0% /run/user/0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 分区 </tag>
            
            <tag> parted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于指针</title>
      <link href="/2018/07/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88/"/>
      <url>/2018/07/29/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>c语言之所以强大，以及其自由性，很大部分体现在其灵活的指针运用上。因此，说指针是c语言的灵魂，一点都不为过。<a id="more"></a></li></ul><h1 id="一级指针"><a href="#一级指针" class="headerlink" title="一级指针"></a>一级指针</h1><p>  *　数组做函数参数时没有副本机制，只是一个地址，因此传入数组参数时需要传入数组的大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> fun(char str[][<span class="number">5</span>], int len)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"sizeof str: %d\n"</span>, sizeof(str));</span><br><span class="line"><span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"strlen str[%d]: %d\tsizeof str[%d]: %d\n"</span>, i, strlen(str[i]), i, sizeof(str[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">sizeof str: <span class="number">4</span></span><br><span class="line">循环输出的strlen为每个字符串的长度</span><br><span class="line">循环输出的sizeof为<span class="number">5</span>（原因见函数实参类型）</span><br></pre></td></tr></table></figure><!-- more --><p>  *　函数改变外部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> modifyvariable(int *src, int value)</span><br><span class="line">&#123;</span><br><span class="line">*src = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = <span class="number">100</span>;</span><br><span class="line">printf(<span class="string">"a: %d\n"</span>, a);</span><br><span class="line">modifyvariable(&amp;a, <span class="number">200</span>);</span><br><span class="line">printf(<span class="string">"a: %d\n"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a: <span class="number">100</span></span><br><span class="line">a: <span class="number">200</span></span><br></pre></td></tr></table></figure><p>  *　跨进程改变变量（外挂）</p><pre><code>* 采用微软的`detours`库* 将程序编译成动态链接库DLL* 将DLL注入到目标线程中，实现修改某地址的数据，或者拦截函数</code></pre><p>  *　做函数形参，数组做参数时会退化为一个一级指针，即其内存空间大小为4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> fun(char str[][<span class="number">5</span>], int len)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"sizeof str: %d\n"</span>, sizeof(str));</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">sizeof str: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>  *　储存数组的首地址，指针数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">char str[][<span class="number">6</span>] = &#123; <span class="string">"eth8"</span>, <span class="string">"eth1"</span>, <span class="string">"eth6"</span>, <span class="string">"eth3"</span>, <span class="string">"eth4"</span> &#125;;</span><br><span class="line">char *pstr[<span class="number">5</span>] = &#123; NULL, NULL, NULL, NULL, NULL &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pstr[i] = str[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *p = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp(pstr[i], pstr[j]) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = pstr[i];</span><br><span class="line">pstr[i] = pstr[j];</span><br><span class="line">pstr[j] = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%s\n"</span>, pstr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">eth1</span><br><span class="line">eth3</span><br><span class="line">eth4</span><br><span class="line">eth6</span><br><span class="line">eth8</span><br></pre></td></tr></table></figure><p>  *　return 有副本机制</p><pre><code>* 其值存放在寄存器中，不能取地址* 如果返回一个在栈上声明的变量，两次输出return的值可能不同* 如果立马输出，由于寄存器还未被其他变量使用，则可能返回正确值；* 如果延时输出（几条IO输出语句即可），则返回错误值；</code></pre><p>  *　作为函数的返回地址（不能返回指向栈上的内容）</p><pre><code>* 具体原因见上一条</code></pre><p>  *　存储常量字符串的首地址，不能修改其值</p><p>  *　间接访问结构体，创建堆上的变量</p><pre><code>* 通过`-&gt;`运算符访问结构体中声明的变量* 通过`malloc`、`calloc`、`realloc`、`new`等函数在堆上开辟内存空间</code></pre><p>  *　#的作用，无论类型，直接加<code>&quot;&quot;</code>,可用于获取函数名变量名等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#define funname(fun)\</span><br><span class="line">&#123;\</span><br><span class="line">printf("%s\n", #fun);\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> modifyvariable(int *src, int value)</span><br><span class="line">&#123;</span><br><span class="line">*src = value;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">funname(modifyvariable);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">modifyvariable</span><br></pre></td></tr></table></figure><h1 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h1><ul><li>批量管理地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">char str[][<span class="number">6</span>] = &#123; <span class="string">"eth8"</span>, <span class="string">"eth1"</span>, <span class="string">"eth6"</span>, <span class="string">"eth3"</span>, <span class="string">"eth4"</span> &#125;;</span><br><span class="line">char *pstr[<span class="number">5</span>] = &#123; NULL, NULL, NULL, NULL, NULL &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pstr[i] = str[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *p = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strcmp(pstr[i], pstr[j]) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = pstr[i];</span><br><span class="line">pstr[i] = pstr[j];</span><br><span class="line">pstr[j] = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%s\n"</span>, pstr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">eth1</span><br><span class="line">eth3</span><br><span class="line">eth4</span><br><span class="line">eth6</span><br><span class="line">eth8</span><br></pre></td></tr></table></figure><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><ul><li>函数名等价于常指针</li><li>函数指针数组：<code>int (*p[2])(int a, int b) = {add, sub};</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int add(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sub(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int(*fun[<span class="number">2</span>])(int, int) = &#123; add, sub &#125;;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, fun[i](<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">150</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h1 id="malloc-realloc-calloc"><a href="#malloc-realloc-calloc" class="headerlink" title="malloc,realloc,calloc"></a>malloc,realloc,calloc</h1><ul><li><code>malloc</code>和<code>calloc</code>区别：<ul><li><code>malloc</code>在堆上开辟一块内存，不会对内存进行清零操作<ul><li>eg: <code>int *p = (int *)malloc(sizeof(int) * 10);</code></li></ul></li><li><code>calloc</code>在堆上开辟一块内存，并且执行内存清零操作<ul><li>eg: <code>int *p = (int *)calloc(10, sizeof(int));</code></li></ul></li></ul></li><li><code>realloc</code>重新分配内存，新增加的内存不会置零</li></ul><h1 id="关于指针类型"><a href="#关于指针类型" class="headerlink" title="关于指针类型"></a>关于指针类型</h1><ul><li>根据指针的内存大小来判定指针的类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getaddress(char str[][<span class="number">6</span>])</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"In Function: \n"</span>);</span><br><span class="line">printf(<span class="string">"str:\t\t%p\tsizeof: %d\n"</span>, str, sizeof(str));</span><br><span class="line">printf(<span class="string">"str[0]:\t\t%p\tsizeof: %d\n"</span>, str[<span class="number">0</span>], sizeof(str[<span class="number">0</span>]));</span><br><span class="line">printf(<span class="string">"str[0][0]:\t%p\tsizeof: %d\n"</span>, &amp;str[<span class="number">0</span>][<span class="number">0</span>], sizeof(str[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char str[][<span class="number">6</span>] = &#123; <span class="string">"eth8"</span>, <span class="string">"eth1"</span>, <span class="string">"eth6"</span>, <span class="string">"eth3"</span>, <span class="string">"eth4"</span> &#125;;</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"In Main: \n"</span>);</span><br><span class="line">printf(<span class="string">"str:\t\t%p\tsizeof: %d\n"</span>, str, sizeof(str));</span><br><span class="line">printf(<span class="string">"str[0]:\t\t%p\tsizeof: %d\n"</span>, str[<span class="number">0</span>], sizeof(str[<span class="number">0</span>]));</span><br><span class="line">printf(<span class="string">"str[0][0]:\t%p\tsizeof: %d\n"</span>, &amp;str[<span class="number">0</span>][<span class="number">0</span>], sizeof(str[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line">getaddress(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">In Main:</span><br><span class="line">str:            <span class="number">0043</span>FC04        sizeof: <span class="number">30</span></span><br><span class="line">str[<span class="number">0</span>]:         <span class="number">0043</span>FC04        sizeof: <span class="number">6</span></span><br><span class="line">str[<span class="number">0</span>][<span class="number">0</span>]:      <span class="number">0043</span>FC04        sizeof: <span class="number">1</span></span><br><span class="line">In <span class="built_in">Function</span>:</span><br><span class="line">str:            <span class="number">0043</span>FC04        sizeof: <span class="number">4</span></span><br><span class="line">str[<span class="number">0</span>]:         <span class="number">0043</span>FC04        sizeof: <span class="number">6</span></span><br><span class="line">str[<span class="number">0</span>][<span class="number">0</span>]:      <span class="number">0043</span>FC04        sizeof: <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="关于指针的遍历"><a href="#关于指针的遍历" class="headerlink" title="关于指针的遍历"></a>关于指针的遍历</h1><ul><li>无论多少级指针，其遍历方法都类似</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int num[<span class="number">4</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%d\t"</span>, num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">putchar(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">putchar(<span class="string">'\n'</span>);</span><br><span class="line">putchar(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%d\t"</span>, *(*(num + i) + j));</span><br><span class="line">&#125;</span><br><span class="line">putchar(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span></span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span></span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span></span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span></span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h1><ul><li><code>printf</code>不会进行类型转换，即占位符是什么类型，就按什么类型输出</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pointer </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
